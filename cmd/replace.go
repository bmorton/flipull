package cmd

import (
	"context"
	"github.com/bmorton/flipull/replacer"
	"github.com/google/go-github/v48/github"
	"github.com/urfave/cli/v2"
	"golang.org/x/oauth2"
)

var ReplaceCommand = &cli.Command{
	Name:   "replace",
	Usage:  "Find and replace text in a file",
	Action: replaceAction,
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name:     "github-token",
			Usage:    "GitHub token for committing changes and opening pull requests",
			Required: true,
			EnvVars:  []string{"GITHUB_TOKEN"},
		},
		&cli.StringFlag{
			Name:  "repo",
			Usage: "name of repository in the format owner/repo[@base-branch]",
		},
		&cli.StringFlag{
			Name:        "target-branch",
			Usage:       "name of branch to create with changes",
			DefaultText: "random branch name",
		},
		&cli.BoolFlag{
			Name:  "dry-run",
			Usage: "output changed files to stdout instead of committing",
		},
		&cli.BoolFlag{
			Name:  "regexp",
			Usage: "enable regular expression mode for find string",
		},
		&cli.StringFlag{
			Name:     "title",
			Usage:    "title for pull request",
			Required: true,
		},
		&cli.StringFlag{
			Name:  "description",
			Usage: "description for pull request",
			Value: "This pull request was automatically generated by [flipull](https://github.com/bmorton/flipull).",
		},
		&cli.StringFlag{
			Name:     "file",
			Usage:    "path to file to replace text in",
			Required: true,
		},
		&cli.StringFlag{
			Name:     "find",
			Usage:    "text to find",
			Required: true,
		},
		&cli.StringFlag{
			Name:     "replace",
			Usage:    "text to replace",
			Required: true,
		},
		&cli.IntFlag{
			Name:  "limit",
			Usage: "replacement limit (-1 for unlimited)",
			Value: -1,
		},
	},
}

func replaceAction(ctx *cli.Context) error {
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: ctx.String("github-token")},
	)
	tc := oauth2.NewClient(context.Background(), ts)
	gh := github.NewClient(tc)

	rep, err := replacer.New(gh, ctx.String("repo"))
	if err != nil {
		return err
	}

	rep.Description = ctx.String("description")
	rep.DryRun = ctx.Bool("dry-run")
	rep.Title = ctx.String("title")
	targetBranch := ctx.String("target-branch")
	if targetBranch != "" {
		rep.TargetBranch = targetBranch
	}
	rep.Path = ctx.String("file")
	rep.Find = ctx.String("find")
	rep.Replace = ctx.String("replace")
	rep.Limit = ctx.Int("limit")
	rep.Regexp = ctx.Bool("regexp")

	return rep.Run(ctx.Context)
}
